{
  "hints": {
    "allowAsset(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "firstDeposit(pay,axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPrice(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjg4LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBhbGxvd0Fzc2V0KHBheSx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2FsbG93QXNzZXQ6CgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gbWJyUGF5OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYWxsb3dBc3NldChwYXksdWludDY0KXZvaWQKCWNhbGxzdWIgYWxsb3dBc3NldAoJaW50IDEKCXJldHVybgoKLy8gYWxsb3dBc3NldChtYnJQYXk6IFBheVR4biwgYXNzZXQ6IEFzc2V0SUQpOiB2b2lkCmFsbG93QXNzZXQ6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjE2CgkvLyBhc3NlcnQoIXRoaXMuYXBwLmFkZHJlc3MuaXNPcHRlZEluVG9Bc3NldChhc3NldCkpCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czoxOAoJLy8gdmVyaWZ5UGF5VHhuKG1iclBheSwgewoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czoyMwoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czoyNAoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0cy9kaWdpdGFsLW1hcmtldHBsYWNlLmFsZ28udHM6MjUKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9kaWdpdGFsLW1hcmtldHBsYWNlLmFsZ28udHM6MjYKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGZpcnN0RGVwb3NpdChwYXksYXhmZXIsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfZmlyc3REZXBvc2l0OgoJLy8gdW5pdGFyeVByaWNlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBub25jZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8geGZlcjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IGF4ZmVyCgk9PQoJYXNzZXJ0CgoJLy8gbWJyUGF5OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMgoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZmlyc3REZXBvc2l0KHBheSxheGZlcix1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgZmlyc3REZXBvc2l0CglpbnQgMQoJcmV0dXJuCgovLyBmaXJzdERlcG9zaXQobWJyUGF5OiBQYXlUeG4sIHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4sIG5vbmNlOiB1aW50NjQsIHVuaXRhcnlQcmljZTogdWludDY0KTogdm9pZApmaXJzdERlcG9zaXQ6Cglwcm90byA0IDAKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjMxCgkvLyBhc3NlcnQoIXRoaXMuZm9yU2FsZUJvYXJkKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNhOiB4ZmVyLnhmZXJBc3NldC5pZCwgbm9uY2U6IG5vbmNlIH0pLmV4aXN0cykKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjMzCgkvLyB2ZXJpZnlQYXlUeG4obWJyUGF5LCB7CgkvLyAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBmb3JTYWxlTWJyLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaW50IDI4MTAwCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czozOQoJLy8gdmVyaWZ5QXNzZXRUcmFuc2ZlclR4bih4ZmVyLCB7CgkvLyAgICAgICAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBidXQgZm9yIHNvbWUgcmVhc29uIHRoZSBjYWxsIGZhaWxzIGluIHRlc3RpbmcuCgkvLyAgICAgICAvLyBhc3NldFNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFzc2V0QW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBhc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTIgLy8geGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtMiAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaW50IDAKCT4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9kaWdpdGFsLW1hcmtldHBsYWNlLmFsZ28udHM6NDYKCS8vIHRoaXMuZm9yU2FsZUJvYXJkKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNhOiB4ZmVyLnhmZXJBc3NldC5pZCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlID0gewoJLy8gICAgICAgZGVwb3NpdGVkOiB4ZmVyLmFzc2V0QW1vdW50LAoJLy8gICAgICAgdW5pdGFyeVByaWNlOiB1bml0YXJ5UHJpY2UsCgkvLyAgICAgfQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFhmZXJBc3NldAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8geGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWl0b2IKCWZyYW1lX2RpZyAtNCAvLyB1bml0YXJ5UHJpY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfcHV0CglyZXRzdWIKCi8vIGRlcG9zaXQoYXhmZXIsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9kZXBvc2l0OgoJLy8gbm9uY2U6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIHhmZXI6IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZGVwb3NpdChheGZlcix1aW50NjQpdm9pZAoJY2FsbHN1YiBkZXBvc2l0CglpbnQgMQoJcmV0dXJuCgovLyBkZXBvc2l0KHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4sIG5vbmNlOiB1aW50NjQpOiB2b2lkCmRlcG9zaXQ6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czo1MwoJLy8gYXNzZXJ0KHRoaXMuZm9yU2FsZUJvYXJkKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNhOiB4ZmVyLnhmZXJBc3NldC5pZCwgbm9uY2U6IG5vbmNlIH0pLmV4aXN0cykKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJYm94X2xlbgoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjU1CgkvLyB2ZXJpZnlBc3NldFRyYW5zZmVyVHhuKHhmZXIsIHsKCS8vICAgICAgIC8vIEZJWE1FOiBUaGlzIHNob3VsZCB3b3JrIGJ1dCBmb3Igc29tZSByZWFzb24gdGhlIGNhbGwgZmFpbHMgaW4gdGVzdGluZy4KCS8vICAgICAgIC8vIGFzc2V0U2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czo2MQoJLy8gY3VycmVudERlcG9zaXRlZCA9IHRoaXMuZm9yU2FsZUJvYXJkKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNhOiB4ZmVyLnhmZXJBc3NldC5pZCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlCgkvLyAgICAgICAuZGVwb3NpdGVkCglpbnQgMAoJaW50IDgKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2J1cnkgMCAvLyBjdXJyZW50RGVwb3NpdGVkOiB1aW50NjQKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjYzCgkvLyBjdXJyZW50VW5pdGFyeVByaWNlID0gdGhpcy5mb3JTYWxlQm9hcmQoeyBvd25lcjogdGhpcy50eG4uc2VuZGVyLCBhc2E6IHhmZXIueGZlckFzc2V0LmlkLCBub25jZTogbm9uY2UgfSkKCS8vICAgICAgIC52YWx1ZS51bml0YXJ5UHJpY2UKCWludCA4IC8vIGhlYWRPZmZzZXQKCWludCA4Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8geGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBub25jZTogdWludDY0CglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9idXJ5IDEgLy8gY3VycmVudFVuaXRhcnlQcmljZTogdWludDY0CgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czo2NQoJLy8gdGhpcy5mb3JTYWxlQm9hcmQoeyBvd25lcjogdGhpcy50eG4uc2VuZGVyLCBhc2E6IHhmZXIueGZlckFzc2V0LmlkLCBub25jZTogbm9uY2UgfSkudmFsdWUgPSB7CgkvLyAgICAgICBkZXBvc2l0ZWQ6IGN1cnJlbnREZXBvc2l0ZWQgKyB4ZmVyLmFzc2V0QW1vdW50LAoJLy8gICAgICAgdW5pdGFyeVByaWNlOiBjdXJyZW50VW5pdGFyeVByaWNlLAoJLy8gICAgIH0KCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gY3VycmVudERlcG9zaXRlZDogdWludDY0CglmcmFtZV9kaWcgLTEgLy8geGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCSsKCWl0b2IKCWZyYW1lX2RpZyAxIC8vIGN1cnJlbnRVbml0YXJ5UHJpY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfcHV0CglyZXRzdWIKCi8vIHNldFByaWNlKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9zZXRQcmljZToKCS8vIHVuaXRhcnlQcmljZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gbm9uY2U6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHNldFByaWNlKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgc2V0UHJpY2UKCWludCAxCglyZXR1cm4KCi8vIHNldFByaWNlKGFzc2V0OiB1aW50NjQsIG5vbmNlOiB1aW50NjQsIHVuaXRhcnlQcmljZTogdWludDY0KTogdm9pZApzZXRQcmljZToKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czo3MgoJLy8gYXNzZXJ0KHRoaXMuZm9yU2FsZUJvYXJkKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNhOiBhc3NldCwgbm9uY2U6IG5vbmNlIH0pLmV4aXN0cykKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBub25jZTogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czo3NAoJLy8gY3VycmVudERlcG9zaXRlZCA9IHRoaXMuZm9yU2FsZUJvYXJkKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNhOiBhc3NldCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlLmRlcG9zaXRlZAoJaW50IDAKCWludCA4Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfYnVyeSAwIC8vIGN1cnJlbnREZXBvc2l0ZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9kaWdpdGFsLW1hcmtldHBsYWNlLmFsZ28udHM6NzUKCS8vIHRoaXMuZm9yU2FsZUJvYXJkKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNhOiBhc3NldCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlID0gewoJLy8gICAgICAgZGVwb3NpdGVkOiBjdXJyZW50RGVwb3NpdGVkLAoJLy8gICAgICAgdW5pdGFyeVByaWNlOiB1bml0YXJ5UHJpY2UsCgkvLyAgICAgfQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gY3VycmVudERlcG9zaXRlZDogdWludDY0CglpdG9iCglmcmFtZV9kaWcgLTMgLy8gdW5pdGFyeVByaWNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJYm94X3B1dAoJcmV0c3ViCgovLyB3aXRoZHJhdyh1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV93aXRoZHJhdzoKCS8vIG5vbmNlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSB3aXRoZHJhdyh1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgd2l0aGRyYXcKCWludCAxCglyZXR1cm4KCi8vIHdpdGhkcmF3KGFzc2V0OiBBc3NldElELCBub25jZTogdWludDY0KTogdm9pZAp3aXRoZHJhdzoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czo4MgoJLy8gY3VycmVudERlcG9zaXRlZCA9IHRoaXMuZm9yU2FsZUJvYXJkKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNhOiBhc3NldC5pZCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlLmRlcG9zaXRlZAoJaW50IDAKCWludCA4Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2J1cnkgMCAvLyBjdXJyZW50RGVwb3NpdGVkOiB1aW50NjQKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjgzCgkvLyB0aGlzLmZvclNhbGVCb2FyZCh7IG93bmVyOiB0aGlzLnR4bi5zZW5kZXIsIGFzYTogYXNzZXQuaWQsIG5vbmNlOiBub25jZSB9KS5kZWxldGUoKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBub25jZTogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9kZWwKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjg1CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYW1vdW50OiBmb3JTYWxlTWJyLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2RpZ2l0YWwtbWFya2V0cGxhY2UuYWxnby50czo4NgoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9kaWdpdGFsLW1hcmtldHBsYWNlLmFsZ28udHM6ODcKCS8vIGFtb3VudDogZm9yU2FsZU1icgoJaW50IDI4MTAwCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjkwCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGN1cnJlbnREZXBvc2l0ZWQsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9kaWdpdGFsLW1hcmtldHBsYWNlLmFsZ28udHM6OTEKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvZGlnaXRhbC1tYXJrZXRwbGFjZS5hbGdvLnRzOjkyCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9kaWdpdGFsLW1hcmtldHBsYWNlLmFsZ28udHM6OTMKCS8vIGFzc2V0QW1vdW50OiBjdXJyZW50RGVwb3NpdGVkCglmcmFtZV9kaWcgMCAvLyBjdXJyZW50RGVwb3NpdGVkOiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnQgMQoJcmV0dXJuCgoqY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoJZXJyCgoqY2FsbF9Ob09wOgoJbWV0aG9kICJhbGxvd0Fzc2V0KHBheSx1aW50NjQpdm9pZCIKCW1ldGhvZCAiZmlyc3REZXBvc2l0KHBheSxheGZlcix1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgImRlcG9zaXQoYXhmZXIsdWludDY0KXZvaWQiCgltZXRob2QgInNldFByaWNlKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgIndpdGhkcmF3KHVpbnQ2NCx1aW50NjQpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfYWxsb3dBc3NldCAqYWJpX3JvdXRlX2ZpcnN0RGVwb3NpdCAqYWJpX3JvdXRlX2RlcG9zaXQgKmFiaV9yb3V0ZV9zZXRQcmljZSAqYWJpX3JvdXRlX3dpdGhkcmF3CgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DigitalMarketplace",
    "desc": "",
    "methods": [
      {
        "name": "allowAsset",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "firstDeposit",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "xfer",
            "type": "axfer"
          },
          {
            "name": "nonce",
            "type": "uint64"
          },
          {
            "name": "unitaryPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deposit",
        "args": [
          {
            "name": "xfer",
            "type": "axfer"
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPrice",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "nonce",
            "type": "uint64"
          },
          {
            "name": "unitaryPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
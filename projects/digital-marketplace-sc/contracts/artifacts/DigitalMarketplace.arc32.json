{
  "hints": {
    "allowAsset(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "firstDeposit(pay,axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPrice(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DigitalMarketplace",
    "desc": "",
    "methods": [
      {
        "name": "allowAsset",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "firstDeposit",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "xfer",
            "type": "axfer"
          },
          {
            "name": "nonce",
            "type": "uint64"
          },
          {
            "name": "unitaryPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deposit",
        "args": [
          {
            "name": "xfer",
            "type": "axfer"
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPrice",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "nonce",
            "type": "uint64"
          },
          {
            "name": "unitaryPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
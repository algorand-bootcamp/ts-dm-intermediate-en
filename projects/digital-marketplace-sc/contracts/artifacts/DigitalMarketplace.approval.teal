#pragma version 10

// This TEAL was generated by TEALScript v0.88.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// allowAsset(pay,uint64)void
*abi_route_allowAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// mbrPay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute allowAsset(pay,uint64)void
	callsub allowAsset
	int 1
	return

// allowAsset(mbrPay: PayTxn, asset: AssetID): void
allowAsset:
	proto 2 0

	// contracts/digital-marketplace.algo.ts:16
	// assert(!this.app.address.isOptedInToAsset(asset))
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts/digital-marketplace.algo.ts:18
	// verifyPayTxn(mbrPay, {
	//       receiver: this.app.address,
	//       amount: globals.assetOptInMinBalance,
	//     })
	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	==
	assert

	// contracts/digital-marketplace.algo.ts:23
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/digital-marketplace.algo.ts:24
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts/digital-marketplace.algo.ts:25
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/digital-marketplace.algo.ts:26
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// firstDeposit(pay,axfer,uint64,uint64)void
*abi_route_firstDeposit:
	// unitaryPrice: uint64
	txna ApplicationArgs 2
	btoi

	// nonce: uint64
	txna ApplicationArgs 1
	btoi

	// xfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// mbrPay: pay
	txn GroupIndex
	int 2
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute firstDeposit(pay,axfer,uint64,uint64)void
	callsub firstDeposit
	int 1
	return

// firstDeposit(mbrPay: PayTxn, xfer: AssetTransferTxn, nonce: uint64, unitaryPrice: uint64): void
firstDeposit:
	proto 4 0

	// contracts/digital-marketplace.algo.ts:31
	// assert(!this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id, nonce: nonce }).exists)
	txn Sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/digital-marketplace.algo.ts:33
	// verifyPayTxn(mbrPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: forSaleMbr,
	//     })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	int 28100
	==
	assert

	// contracts/digital-marketplace.algo.ts:39
	// verifyAssetTransferTxn(xfer, {
	//       // FIXME: This should work but for some reason the call fails in testing.
	//       // assetSender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThan: 0 },
	//     })
	// verify assetReceiver
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify assetAmount
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetAmount
	int 0
	>
	assert

	// contracts/digital-marketplace.algo.ts:46
	// this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id, nonce: nonce }).value = {
	//       deposited: xfer.assetAmount,
	//       unitaryPrice: unitaryPrice,
	//     }
	txn Sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	frame_dig -4 // unitaryPrice: uint64
	itob
	concat
	box_put
	retsub

// deposit(axfer,uint64)void
*abi_route_deposit:
	// nonce: uint64
	txna ApplicationArgs 1
	btoi

	// xfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute deposit(axfer,uint64)void
	callsub deposit
	int 1
	return

// deposit(xfer: AssetTransferTxn, nonce: uint64): void
deposit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/digital-marketplace.algo.ts:53
	// assert(this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id, nonce: nonce }).exists)
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/digital-marketplace.algo.ts:55
	// verifyAssetTransferTxn(xfer, {
	//       // FIXME: This should work but for some reason the call fails in testing.
	//       // assetSender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//     })
	// verify assetReceiver
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/digital-marketplace.algo.ts:61
	// currentDeposited = this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id, nonce: nonce }).value
	//       .deposited
	int 0
	int 8
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts/digital-marketplace.algo.ts:63
	// currentUnitaryPrice = this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id, nonce: nonce })
	//       .value.unitaryPrice
	int 8 // headOffset
	int 8
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // currentUnitaryPrice: uint64

	// contracts/digital-marketplace.algo.ts:65
	// this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id, nonce: nonce }).value = {
	//       deposited: currentDeposited + xfer.assetAmount,
	//       unitaryPrice: currentUnitaryPrice,
	//     }
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	frame_dig 0 // currentDeposited: uint64
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetAmount
	+
	itob
	frame_dig 1 // currentUnitaryPrice: uint64
	itob
	concat
	box_put
	retsub

// setPrice(uint64,uint64,uint64)void
*abi_route_setPrice:
	// unitaryPrice: uint64
	txna ApplicationArgs 3
	btoi

	// nonce: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrice(uint64,uint64,uint64)void
	callsub setPrice
	int 1
	return

// setPrice(asset: uint64, nonce: uint64, unitaryPrice: uint64): void
setPrice:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/digital-marketplace.algo.ts:72
	// assert(this.forSaleBoard({ owner: this.txn.sender, asa: asset, nonce: nonce }).exists)
	txn Sender
	frame_dig -1 // asset: uint64
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/digital-marketplace.algo.ts:74
	// currentDeposited = this.forSaleBoard({ owner: this.txn.sender, asa: asset, nonce: nonce }).value.deposited
	int 0
	int 8
	txn Sender
	frame_dig -1 // asset: uint64
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts/digital-marketplace.algo.ts:75
	// this.forSaleBoard({ owner: this.txn.sender, asa: asset, nonce: nonce }).value = {
	//       deposited: currentDeposited,
	//       unitaryPrice: unitaryPrice,
	//     }
	txn Sender
	frame_dig -1 // asset: uint64
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	frame_dig 0 // currentDeposited: uint64
	itob
	frame_dig -3 // unitaryPrice: uint64
	itob
	concat
	box_put
	retsub

// withdraw(uint64,uint64)void
*abi_route_withdraw:
	// nonce: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdraw(uint64,uint64)void
	callsub withdraw
	int 1
	return

// withdraw(asset: AssetID, nonce: uint64): void
withdraw:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/digital-marketplace.algo.ts:82
	// currentDeposited = this.forSaleBoard({ owner: this.txn.sender, asa: asset.id, nonce: nonce }).value.deposited
	int 0
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts/digital-marketplace.algo.ts:83
	// this.forSaleBoard({ owner: this.txn.sender, asa: asset.id, nonce: nonce }).delete()
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	box_del

	// contracts/digital-marketplace.algo.ts:85
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: forSaleMbr,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/digital-marketplace.algo.ts:86
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/digital-marketplace.algo.ts:87
	// amount: forSaleMbr
	int 28100
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/digital-marketplace.algo.ts:90
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: currentDeposited,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/digital-marketplace.algo.ts:91
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/digital-marketplace.algo.ts:92
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/digital-marketplace.algo.ts:93
	// assetAmount: currentDeposited
	frame_dig 0 // currentDeposited: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "allowAsset(pay,uint64)void"
	method "firstDeposit(pay,axfer,uint64,uint64)void"
	method "deposit(axfer,uint64)void"
	method "setPrice(uint64,uint64,uint64)void"
	method "withdraw(uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_allowAsset *abi_route_firstDeposit *abi_route_deposit *abi_route_setPrice *abi_route_withdraw
	err
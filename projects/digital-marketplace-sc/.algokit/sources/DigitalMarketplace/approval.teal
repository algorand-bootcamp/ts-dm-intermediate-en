#pragma version 10

// This TEAL was generated by TEALScript v0.96.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// allowAsset(pay,uint64)void
*abi_route_allowAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// mbrPay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (mbrPay) for allowAsset must be a pay transaction
	assert

	// execute allowAsset(pay,uint64)void
	callsub allowAsset
	int 1
	return

// allowAsset(mbrPay: PayTxn, asset: AssetID): void
allowAsset:
	proto 2 0

	// contracts\DigitalMarketplace.algo.ts:22
	// assert(!this.app.address.isOptedInToAsset(asset))
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts\DigitalMarketplace.algo.ts:24
	// verifyPayTxn(mbrPay, {
	//       receiver: this.app.address,
	//       amount: globals.assetOptInMinBalance,
	//     })
	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"globals.assetOptInMinBalance"}
	assert

	// contracts\DigitalMarketplace.algo.ts:29
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\DigitalMarketplace.algo.ts:30
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts\DigitalMarketplace.algo.ts:31
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts\DigitalMarketplace.algo.ts:32
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// firstDeposit(pay,axfer,uint64,uint64)void
*abi_route_firstDeposit:
	// unitaryPrice: uint64
	txna ApplicationArgs 2
	btoi

	// nonce: uint64
	txna ApplicationArgs 1
	btoi

	// xfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 2 (xfer) for firstDeposit must be a axfer transaction
	assert

	// mbrPay: pay
	txn GroupIndex
	int 2
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 3 (mbrPay) for firstDeposit must be a pay transaction
	assert

	// execute firstDeposit(pay,axfer,uint64,uint64)void
	callsub firstDeposit
	int 1
	return

// firstDeposit(mbrPay: PayTxn, xfer: AssetTransferTxn, nonce: uint64, unitaryPrice: uint64): void
firstDeposit:
	proto 4 0

	// contracts\DigitalMarketplace.algo.ts:37
	// assert(!this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).exists)
	txn Sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts\DigitalMarketplace.algo.ts:39
	// verifyPayTxn(mbrPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: forSaleMbr,
	//     })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	int 47300
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"forSaleMbr"}
	assert

	// contracts\DigitalMarketplace.algo.ts:45
	// verifyAssetTransferTxn(xfer, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThan: 0 },
	//     })
	// verify sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"xfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"xfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetAmount
	int 0
	>

	// transaction verification failed: {"txn":"xfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// contracts\DigitalMarketplace.algo.ts:51
	// this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).value = {
	//       deposited: xfer.assetAmount,
	//       unitaryPrice: unitaryPrice,
	//       bidder: globals.zeroAddress,
	//       bidQuantity: 0,
	//       bidUnitaryPrice: 0,
	//     }
	txn Sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	frame_dig -4 // unitaryPrice: uint64
	itob
	concat
	global ZeroAddress
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	box_put
	retsub

// deposit(axfer,uint64)void
*abi_route_deposit:
	// nonce: uint64
	txna ApplicationArgs 1
	btoi

	// xfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (xfer) for deposit must be a axfer transaction
	assert

	// execute deposit(axfer,uint64)void
	callsub deposit
	int 1
	return

// deposit(xfer: AssetTransferTxn, nonce: uint64): void
deposit:
	proto 2 0

	// contracts\DigitalMarketplace.algo.ts:61
	// assert(this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).exists)
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts\DigitalMarketplace.algo.ts:63
	// verifyAssetTransferTxn(xfer, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThan: 0 },
	//     })
	// verify sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"xfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"xfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetAmount
	int 0
	>

	// transaction verification failed: {"txn":"xfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// contracts\DigitalMarketplace.algo.ts:69
	// this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).value.deposited += xfer.assetAmount
	int 0
	dup
	int 8
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetAmount
	+
	itob
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_replace
	retsub

// setPrice(uint64,uint64,uint64)void
*abi_route_setPrice:
	// unitaryPrice: uint64
	txna ApplicationArgs 3
	btoi

	// nonce: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrice(uint64,uint64,uint64)void
	callsub setPrice
	int 1
	return

// setPrice(asset: AssetID, nonce: uint64, unitaryPrice: uint64): void
setPrice:
	proto 3 0

	// contracts\DigitalMarketplace.algo.ts:73
	// this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.unitaryPrice = unitaryPrice
	int 8 // headOffset
	frame_dig -3 // unitaryPrice: uint64
	itob
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_replace
	retsub

// buy(address,uint64,uint64,pay,uint64)void
*abi_route_buy:
	// quantity: uint64
	txna ApplicationArgs 4
	btoi

	// buyPay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (buyPay) for buy must be a pay transaction
	assert

	// nonce: uint64
	txna ApplicationArgs 3
	btoi

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 4 (owner) for buy must be a address
	assert

	// execute buy(address,uint64,uint64,pay,uint64)void
	callsub buy
	int 1
	return

// buy(owner: Address, asset: AssetID, nonce: uint64, buyPay: PayTxn, quantity: uint64): void
buy:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts\DigitalMarketplace.algo.ts:77
	// currentUnitaryPrice = this.listings({ owner: owner, asset: asset, nonce: nonce }).value.unitaryPrice
	int 8 // headOffset
	int 8
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentUnitaryPrice: uint64

	// contracts\DigitalMarketplace.algo.ts:79
	// amountToBePaid = wideRatio([currentUnitaryPrice, quantity], [10 ** asset.decimals])
	frame_dig 0 // currentUnitaryPrice: uint64
	frame_dig -5 // quantity: uint64
	mulw
	int 0
	int 10
	frame_dig -2 // asset: AssetID
	asset_params_get AssetDecimals
	pop
	exp
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // amountToBePaid: uint64

	// contracts\DigitalMarketplace.algo.ts:81
	// verifyPayTxn(buyPay, {
	//       sender: this.txn.sender,
	//       receiver: owner,
	//       amount: amountToBePaid,
	//     })
	// verify sender
	frame_dig -4 // buyPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"buyPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -4 // buyPay: PayTxn
	gtxns Receiver
	frame_dig -1 // owner: Address
	==

	// transaction verification failed: {"txn":"buyPay","field":"receiver","expected":"owner"}
	assert

	// verify amount
	frame_dig -4 // buyPay: PayTxn
	gtxns Amount
	frame_dig 1 // amountToBePaid: uint64
	==

	// transaction verification failed: {"txn":"buyPay","field":"amount","expected":"amountToBePaid"}
	assert

	// contracts\DigitalMarketplace.algo.ts:87
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: quantity,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\DigitalMarketplace.algo.ts:88
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts\DigitalMarketplace.algo.ts:89
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\DigitalMarketplace.algo.ts:90
	// assetAmount: quantity
	frame_dig -5 // quantity: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\DigitalMarketplace.algo.ts:93
	// this.listings({ owner: owner, asset: asset, nonce: nonce }).value.deposited -= quantity
	int 0
	dup
	int 8
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -5 // quantity: uint64
	-
	itob
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_replace
	retsub

// bid(address,uint64,uint64,pay,uint64,uint64)void
*abi_route_bid:
	// unitaryPrice: uint64
	txna ApplicationArgs 5
	btoi

	// quantity: uint64
	txna ApplicationArgs 4
	btoi

	// bidPay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 2 (bidPay) for bid must be a pay transaction
	assert

	// nonce: uint64
	txna ApplicationArgs 3
	btoi

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 5 (owner) for bid must be a address
	assert

	// execute bid(address,uint64,uint64,pay,uint64,uint64)void
	callsub bid
	int 1
	return

// bid(owner: Address, asset: AssetID, nonce: uint64, bidPay: PayTxn, quantity: uint64, unitaryPrice: uint64): void
bid:
	proto 6 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts\DigitalMarketplace.algo.ts:97
	// assert(this.txn.sender.isOptedInToAsset(asset))
	txn Sender
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	assert

	// contracts\DigitalMarketplace.algo.ts:99
	// currentBidder = this.listings({ owner: owner, asset: asset, nonce: nonce }).value.bidder
	int 16 // headOffset
	int 32
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	frame_bury 0 // currentBidder: address

	// *if0_condition
	// contracts\DigitalMarketplace.algo.ts:100
	// currentBidder !== globals.zeroAddress
	frame_dig 0 // currentBidder: address
	global ZeroAddress
	!=
	bz *if0_end

	// *if0_consequent
	// contracts\DigitalMarketplace.algo.ts:101
	// currentBidQuantity = this.listings({ owner: owner, asset: asset, nonce: nonce }).value.bidQuantity
	int 48 // headOffset
	int 8
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // currentBidQuantity: uint64

	// contracts\DigitalMarketplace.algo.ts:102
	// currentBidUnitaryPrice = this.listings({ owner: owner, asset: asset, nonce: nonce }).value.bidUnitaryPrice
	int 56 // headOffset
	int 8
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // currentBidUnitaryPrice: uint64

	// contracts\DigitalMarketplace.algo.ts:103
	// assert(unitaryPrice > currentBidUnitaryPrice)
	frame_dig -6 // unitaryPrice: uint64
	frame_dig 2 // currentBidUnitaryPrice: uint64
	>
	assert

	// contracts\DigitalMarketplace.algo.ts:105
	// currentBidDeposit = wideRatio([currentBidUnitaryPrice, currentBidQuantity], [10 ** asset.decimals])
	frame_dig 2 // currentBidUnitaryPrice: uint64
	frame_dig 1 // currentBidQuantity: uint64
	mulw
	int 0
	int 10
	frame_dig -2 // asset: AssetID
	asset_params_get AssetDecimals
	pop
	exp
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 3 // currentBidDeposit: uint64

	// contracts\DigitalMarketplace.algo.ts:106
	// sendPayment({
	//         receiver: currentBidder,
	//         amount: currentBidDeposit,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\DigitalMarketplace.algo.ts:107
	// receiver: currentBidder
	frame_dig 0 // currentBidder: address
	itxn_field Receiver

	// contracts\DigitalMarketplace.algo.ts:108
	// amount: currentBidDeposit
	frame_dig 3 // currentBidDeposit: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	// contracts\DigitalMarketplace.algo.ts:112
	// bidDeposit = wideRatio([unitaryPrice, quantity], [10 ** asset.decimals])
	frame_dig -6 // unitaryPrice: uint64
	frame_dig -5 // quantity: uint64
	mulw
	int 0
	int 10
	frame_dig -2 // asset: AssetID
	asset_params_get AssetDecimals
	pop
	exp
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // bidDeposit: uint64

	// contracts\DigitalMarketplace.algo.ts:113
	// verifyPayTxn(bidPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: bidDeposit,
	//     })
	// verify sender
	frame_dig -4 // bidPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"bidPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -4 // bidPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"bidPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -4 // bidPay: PayTxn
	gtxns Amount
	frame_dig 4 // bidDeposit: uint64
	==

	// transaction verification failed: {"txn":"bidPay","field":"amount","expected":"bidDeposit"}
	assert

	// contracts\DigitalMarketplace.algo.ts:119
	// this.listings({ owner: owner, asset: asset, nonce: nonce }).value.bidder = this.txn.sender
	int 16 // headOffset
	txn Sender
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts\DigitalMarketplace.algo.ts:120
	// this.listings({ owner: owner, asset: asset, nonce: nonce }).value.bidQuantity = quantity
	int 48 // headOffset
	frame_dig -5 // quantity: uint64
	itob
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts\DigitalMarketplace.algo.ts:121
	// this.listings({ owner: owner, asset: asset, nonce: nonce }).value.bidUnitaryPrice = unitaryPrice
	int 56 // headOffset
	frame_dig -6 // unitaryPrice: uint64
	itob
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_replace
	retsub

// acceptBid(uint64,uint64)void
*abi_route_acceptBid:
	// nonce: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute acceptBid(uint64,uint64)void
	callsub acceptBid
	int 1
	return

// acceptBid(asset: AssetID, nonce: uint64): void
acceptBid:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 5

	// contracts\DigitalMarketplace.algo.ts:125
	// currentDeposited = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.deposited
	int 0
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts\DigitalMarketplace.algo.ts:126
	// currentBidder = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.bidder
	int 16 // headOffset
	int 32
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	frame_bury 1 // currentBidder: address

	// contracts\DigitalMarketplace.algo.ts:127
	// currentBidQuantity = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.bidQuantity
	int 48 // headOffset
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // currentBidQuantity: uint64

	// contracts\DigitalMarketplace.algo.ts:128
	// currentBidUnitaryPrice = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value
	//       .bidUnitaryPrice
	int 56 // headOffset
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 3 // currentBidUnitaryPrice: uint64

	// contracts\DigitalMarketplace.algo.ts:131
	// assert(currentBidder !== globals.zeroAddress)
	frame_dig 1 // currentBidder: address
	global ZeroAddress
	!=
	assert

	// contracts\DigitalMarketplace.algo.ts:133
	// minQuantity = currentDeposited < currentBidQuantity ? currentDeposited : currentBidQuantity
	frame_dig 0 // currentDeposited: uint64
	frame_dig 2 // currentBidQuantity: uint64
	<
	bz *ternary0_false
	frame_dig 0 // currentDeposited: uint64
	b *ternary0_end

*ternary0_false:
	frame_dig 2 // currentBidQuantity: uint64

*ternary0_end:
	frame_bury 4 // minQuantity: uint64

	// contracts\DigitalMarketplace.algo.ts:134
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetReceiver: currentBidder,
	//       assetAmount: minQuantity,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\DigitalMarketplace.algo.ts:135
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts\DigitalMarketplace.algo.ts:136
	// assetReceiver: currentBidder
	frame_dig 1 // currentBidder: address
	itxn_field AssetReceiver

	// contracts\DigitalMarketplace.algo.ts:137
	// assetAmount: minQuantity
	frame_dig 4 // minQuantity: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\DigitalMarketplace.algo.ts:140
	// currentBidDeposit = wideRatio([currentBidUnitaryPrice, currentBidQuantity], [10 ** asset.decimals])
	frame_dig 3 // currentBidUnitaryPrice: uint64
	frame_dig 2 // currentBidQuantity: uint64
	mulw
	int 0
	int 10
	frame_dig -1 // asset: AssetID
	asset_params_get AssetDecimals
	pop
	exp
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 5 // currentBidDeposit: uint64

	// contracts\DigitalMarketplace.algo.ts:141
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: currentBidDeposit,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\DigitalMarketplace.algo.ts:142
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\DigitalMarketplace.algo.ts:143
	// amount: currentBidDeposit
	frame_dig 5 // currentBidDeposit: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\DigitalMarketplace.algo.ts:146
	// this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.deposited -= minQuantity
	int 0
	dup
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 4 // minQuantity: uint64
	-
	itob
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_replace

	// contracts\DigitalMarketplace.algo.ts:147
	// this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.bidQuantity -= minQuantity
	int 48 // headOffset
	dup
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 4 // minQuantity: uint64
	-
	itob
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_replace
	retsub

// withdraw(uint64,uint64)void
*abi_route_withdraw:
	// nonce: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdraw(uint64,uint64)void
	callsub withdraw
	int 1
	return

// withdraw(asset: AssetID, nonce: uint64): void
withdraw:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts\DigitalMarketplace.algo.ts:151
	// currentDeposited = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.deposited
	int 0
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts\DigitalMarketplace.algo.ts:152
	// currentBidder = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.bidder
	int 16 // headOffset
	int 32
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	frame_bury 1 // currentBidder: address

	// contracts\DigitalMarketplace.algo.ts:153
	// currentBidQuantity = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.bidQuantity
	int 48 // headOffset
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // currentBidQuantity: uint64

	// contracts\DigitalMarketplace.algo.ts:154
	// currentBidUnitaryPrice = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value
	//       .bidUnitaryPrice
	int 56 // headOffset
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 3 // currentBidUnitaryPrice: uint64

	// *if1_condition
	// contracts\DigitalMarketplace.algo.ts:157
	// currentBidder !== globals.zeroAddress
	frame_dig 1 // currentBidder: address
	global ZeroAddress
	!=
	bz *if1_end

	// *if1_consequent
	// contracts\DigitalMarketplace.algo.ts:158
	// currentBidDeposit = wideRatio([currentBidUnitaryPrice, currentBidQuantity], [10 ** asset.decimals])
	frame_dig 3 // currentBidUnitaryPrice: uint64
	frame_dig 2 // currentBidQuantity: uint64
	mulw
	int 0
	int 10
	frame_dig -1 // asset: AssetID
	asset_params_get AssetDecimals
	pop
	exp
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // currentBidDeposit: uint64

	// contracts\DigitalMarketplace.algo.ts:159
	// sendPayment({
	//         receiver: currentBidder,
	//         amount: currentBidDeposit,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\DigitalMarketplace.algo.ts:160
	// receiver: currentBidder
	frame_dig 1 // currentBidder: address
	itxn_field Receiver

	// contracts\DigitalMarketplace.algo.ts:161
	// amount: currentBidDeposit
	frame_dig 4 // currentBidDeposit: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	// contracts\DigitalMarketplace.algo.ts:165
	// this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).delete()
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	box_del

	// contracts\DigitalMarketplace.algo.ts:167
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: forSaleMbr,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\DigitalMarketplace.algo.ts:168
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\DigitalMarketplace.algo.ts:169
	// amount: forSaleMbr
	int 47300
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\DigitalMarketplace.algo.ts:172
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: currentDeposited,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\DigitalMarketplace.algo.ts:173
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts\DigitalMarketplace.algo.ts:174
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\DigitalMarketplace.algo.ts:175
	// assetAmount: currentDeposited
	frame_dig 0 // currentDeposited: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "allowAsset(pay,uint64)void"
	method "firstDeposit(pay,axfer,uint64,uint64)void"
	method "deposit(axfer,uint64)void"
	method "setPrice(uint64,uint64,uint64)void"
	method "buy(address,uint64,uint64,pay,uint64)void"
	method "bid(address,uint64,uint64,pay,uint64,uint64)void"
	method "acceptBid(uint64,uint64)void"
	method "withdraw(uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_allowAsset *abi_route_firstDeposit *abi_route_deposit *abi_route_setPrice *abi_route_buy *abi_route_bid *abi_route_acceptBid *abi_route_withdraw

	// this contract does not implement the given ABI method for call NoOp
	err